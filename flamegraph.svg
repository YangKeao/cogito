<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1030" onload="init(evt)" viewBox="0 0 1200 1030" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1030" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1013.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1013.00"> </text><svg id="frames" x="10" width="1180"><g><title>__rg_realloc (2,052 samples, 5.64%)</title><rect x="0.0000%" y="821" width="5.6429%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="831.50">__rg_re..</text></g><g><title>Unknown (2,052 samples, 5.64%)</title><rect x="0.0000%" y="805" width="5.6429%" height="15" fill="rgb(217,0,24)"/><text x="0.2500%" y="815.50">Unknown</text></g><g><title>_start (2,052 samples, 5.64%)</title><rect x="0.0000%" y="789" width="5.6429%" height="15" fill="rgb(221,193,54)"/><text x="0.2500%" y="799.50">_start</text></g><g><title>__libc_start_main (2,052 samples, 5.64%)</title><rect x="0.0000%" y="773" width="5.6429%" height="15" fill="rgb(248,212,6)"/><text x="0.2500%" y="783.50">__libc_..</text></g><g><title>main (2,052 samples, 5.64%)</title><rect x="0.0000%" y="757" width="5.6429%" height="15" fill="rgb(208,68,35)"/><text x="0.2500%" y="767.50">main</text></g><g><title>std::rt::lang_start_internal::hd7efcfd33686f472/std::panic::catch_unwind::h05e542185e35aabf/std::panicking::try::h28c2e2ec1c3871ce (2,052 samples, 5.64%)</title><rect x="0.0000%" y="741" width="5.6429%" height="15" fill="rgb(232,128,0)"/><text x="0.2500%" y="751.50">std::rt..</text></g><g><title>__rust_maybe_catch_panic (2,052 samples, 5.64%)</title><rect x="0.0000%" y="725" width="5.6429%" height="15" fill="rgb(207,160,47)"/><text x="0.2500%" y="735.50">__rust_..</text></g><g><title>std::panicking::try::do_call::h3210e2ce6a68897b/std::rt::lang_start_internal::{{closure}}::h812f70926ebbddd0 (2,052 samples, 5.64%)</title><rect x="0.0000%" y="709" width="5.6429%" height="15" fill="rgb(228,23,34)"/><text x="0.2500%" y="719.50">std::pa..</text></g><g><title>std::rt::lang_start::{{closure}}::he79ec0169c9d5a53 (2,052 samples, 5.64%)</title><rect x="0.0000%" y="693" width="5.6429%" height="15" fill="rgb(218,30,26)"/><text x="0.2500%" y="703.50">std::rt..</text></g><g><title>alloc_free::main::hc80b97a251692aa3 (2,052 samples, 5.64%)</title><rect x="0.0000%" y="677" width="5.6429%" height="15" fill="rgb(220,122,19)"/><text x="0.2500%" y="687.50">alloc_f..</text></g><g><title>__rg_realloc (2,048 samples, 5.63%)</title><rect x="0.0110%" y="661" width="5.6319%" height="15" fill="rgb(250,228,42)"/><text x="0.2610%" y="671.50">__rg_re..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter::h291ca61c1fe3b28d (260 samples, 0.71%)</title><rect x="5.6429%" y="805" width="0.7150%" height="15" fill="rgb(240,193,28)"/><text x="5.8929%" y="815.50"></text></g><g><title>__rg_realloc (260 samples, 0.71%)</title><rect x="5.6429%" y="789" width="0.7150%" height="15" fill="rgb(216,20,37)"/><text x="5.8929%" y="799.50"></text></g><g><title>Unknown (260 samples, 0.71%)</title><rect x="5.6429%" y="773" width="0.7150%" height="15" fill="rgb(206,188,39)"/><text x="5.8929%" y="783.50"></text></g><g><title>_start (260 samples, 0.71%)</title><rect x="5.6429%" y="757" width="0.7150%" height="15" fill="rgb(217,207,13)"/><text x="5.8929%" y="767.50"></text></g><g><title>__libc_start_main (260 samples, 0.71%)</title><rect x="5.6429%" y="741" width="0.7150%" height="15" fill="rgb(231,73,38)"/><text x="5.8929%" y="751.50"></text></g><g><title>main (260 samples, 0.71%)</title><rect x="5.6429%" y="725" width="0.7150%" height="15" fill="rgb(225,20,46)"/><text x="5.8929%" y="735.50"></text></g><g><title>std::rt::lang_start_internal::hd7efcfd33686f472/std::panic::catch_unwind::h05e542185e35aabf/std::panicking::try::h28c2e2ec1c3871ce (260 samples, 0.71%)</title><rect x="5.6429%" y="709" width="0.7150%" height="15" fill="rgb(210,31,41)"/><text x="5.8929%" y="719.50"></text></g><g><title>__rust_maybe_catch_panic (260 samples, 0.71%)</title><rect x="5.6429%" y="693" width="0.7150%" height="15" fill="rgb(221,200,47)"/><text x="5.8929%" y="703.50"></text></g><g><title>std::panicking::try::do_call::h3210e2ce6a68897b/std::rt::lang_start_internal::{{closure}}::h812f70926ebbddd0 (260 samples, 0.71%)</title><rect x="5.6429%" y="677" width="0.7150%" height="15" fill="rgb(226,26,5)"/><text x="5.8929%" y="687.50"></text></g><g><title>std::rt::lang_start::{{closure}}::he79ec0169c9d5a53 (260 samples, 0.71%)</title><rect x="5.6429%" y="661" width="0.7150%" height="15" fill="rgb(249,33,26)"/><text x="5.8929%" y="671.50"></text></g><g><title>alloc_free::main::hc80b97a251692aa3 (260 samples, 0.71%)</title><rect x="5.6429%" y="645" width="0.7150%" height="15" fill="rgb(235,183,28)"/><text x="5.8929%" y="655.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (260 samples, 0.71%)</title><rect x="5.6429%" y="629" width="0.7150%" height="15" fill="rgb(221,5,38)"/><text x="5.8929%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter::h291ca61c1fe3b28d (260 samples, 0.71%)</title><rect x="5.6429%" y="613" width="0.7150%" height="15" fill="rgb(247,18,42)"/><text x="5.8929%" y="623.50"></text></g><g><title>__rg_realloc (256 samples, 0.70%)</title><rect x="5.6539%" y="597" width="0.7040%" height="15" fill="rgb(241,131,45)"/><text x="5.9039%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter::h74e96bc70234297c (7,656 samples, 21.05%)</title><rect x="6.3579%" y="805" width="21.0538%" height="15" fill="rgb(249,31,29)"/><text x="6.6079%" y="815.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec..</text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold::h260bd8b6ecb4ec80 (3,656 samples, 10.05%)</title><rect x="17.3578%" y="789" width="10.0539%" height="15" fill="rgb(225,111,53)"/><text x="17.6078%" y="799.50">&lt;core::iter::ad..</text></g><g><title>Unknown (3,656 samples, 10.05%)</title><rect x="17.3578%" y="773" width="10.0539%" height="15" fill="rgb(238,160,17)"/><text x="17.6078%" y="783.50">Unknown</text></g><g><title>_start (3,656 samples, 10.05%)</title><rect x="17.3578%" y="757" width="10.0539%" height="15" fill="rgb(214,148,48)"/><text x="17.6078%" y="767.50">_start</text></g><g><title>__libc_start_main (3,656 samples, 10.05%)</title><rect x="17.3578%" y="741" width="10.0539%" height="15" fill="rgb(232,36,49)"/><text x="17.6078%" y="751.50">__libc_start_ma..</text></g><g><title>main (3,656 samples, 10.05%)</title><rect x="17.3578%" y="725" width="10.0539%" height="15" fill="rgb(209,103,24)"/><text x="17.6078%" y="735.50">main</text></g><g><title>std::rt::lang_start_internal::hd7efcfd33686f472/std::panic::catch_unwind::h05e542185e35aabf/std::panicking::try::h28c2e2ec1c3871ce (3,656 samples, 10.05%)</title><rect x="17.3578%" y="709" width="10.0539%" height="15" fill="rgb(229,88,8)"/><text x="17.6078%" y="719.50">std::rt::lang_s..</text></g><g><title>__rust_maybe_catch_panic (3,656 samples, 10.05%)</title><rect x="17.3578%" y="693" width="10.0539%" height="15" fill="rgb(213,181,19)"/><text x="17.6078%" y="703.50">__rust_maybe_ca..</text></g><g><title>std::panicking::try::do_call::h3210e2ce6a68897b/std::rt::lang_start_internal::{{closure}}::h812f70926ebbddd0 (3,656 samples, 10.05%)</title><rect x="17.3578%" y="677" width="10.0539%" height="15" fill="rgb(254,191,54)"/><text x="17.6078%" y="687.50">std::panicking:..</text></g><g><title>std::rt::lang_start::{{closure}}::he79ec0169c9d5a53 (3,656 samples, 10.05%)</title><rect x="17.3578%" y="661" width="10.0539%" height="15" fill="rgb(241,83,37)"/><text x="17.6078%" y="671.50">std::rt::lang_s..</text></g><g><title>alloc_free::main::hc80b97a251692aa3 (3,656 samples, 10.05%)</title><rect x="17.3578%" y="645" width="10.0539%" height="15" fill="rgb(233,36,39)"/><text x="17.6078%" y="655.50">alloc_free::mai..</text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (3,656 samples, 10.05%)</title><rect x="17.3578%" y="629" width="10.0539%" height="15" fill="rgb(226,3,54)"/><text x="17.6078%" y="639.50">alloc_free::qui..</text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (3,652 samples, 10.04%)</title><rect x="17.3688%" y="613" width="10.0429%" height="15" fill="rgb(245,192,40)"/><text x="17.6188%" y="623.50">alloc_free::qui..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter::h74e96bc70234297c (3,652 samples, 10.04%)</title><rect x="17.3688%" y="597" width="10.0429%" height="15" fill="rgb(238,167,29)"/><text x="17.6188%" y="607.50">&lt;alloc::vec::Ve..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter::h9fbb60f564278adb (2,052 samples, 5.64%)</title><rect x="27.4117%" y="805" width="5.6429%" height="15" fill="rgb(232,182,51)"/><text x="27.6617%" y="815.50">&lt;alloc:..</text></g><g><title>__rg_realloc (2,052 samples, 5.64%)</title><rect x="27.4117%" y="789" width="5.6429%" height="15" fill="rgb(231,60,39)"/><text x="27.6617%" y="799.50">__rg_re..</text></g><g><title>Unknown (2,052 samples, 5.64%)</title><rect x="27.4117%" y="773" width="5.6429%" height="15" fill="rgb(208,69,12)"/><text x="27.6617%" y="783.50">Unknown</text></g><g><title>_start (2,052 samples, 5.64%)</title><rect x="27.4117%" y="757" width="5.6429%" height="15" fill="rgb(235,93,37)"/><text x="27.6617%" y="767.50">_start</text></g><g><title>__libc_start_main (2,052 samples, 5.64%)</title><rect x="27.4117%" y="741" width="5.6429%" height="15" fill="rgb(213,116,39)"/><text x="27.6617%" y="751.50">__libc_..</text></g><g><title>main (2,052 samples, 5.64%)</title><rect x="27.4117%" y="725" width="5.6429%" height="15" fill="rgb(222,207,29)"/><text x="27.6617%" y="735.50">main</text></g><g><title>std::rt::lang_start_internal::hd7efcfd33686f472/std::panic::catch_unwind::h05e542185e35aabf/std::panicking::try::h28c2e2ec1c3871ce (2,052 samples, 5.64%)</title><rect x="27.4117%" y="709" width="5.6429%" height="15" fill="rgb(206,96,30)"/><text x="27.6617%" y="719.50">std::rt..</text></g><g><title>__rust_maybe_catch_panic (2,052 samples, 5.64%)</title><rect x="27.4117%" y="693" width="5.6429%" height="15" fill="rgb(218,138,4)"/><text x="27.6617%" y="703.50">__rust_..</text></g><g><title>std::panicking::try::do_call::h3210e2ce6a68897b/std::rt::lang_start_internal::{{closure}}::h812f70926ebbddd0 (2,052 samples, 5.64%)</title><rect x="27.4117%" y="677" width="5.6429%" height="15" fill="rgb(250,191,14)"/><text x="27.6617%" y="687.50">std::pa..</text></g><g><title>std::rt::lang_start::{{closure}}::he79ec0169c9d5a53 (2,052 samples, 5.64%)</title><rect x="27.4117%" y="661" width="5.6429%" height="15" fill="rgb(239,60,40)"/><text x="27.6617%" y="671.50">std::rt..</text></g><g><title>alloc_free::main::hc80b97a251692aa3 (2,052 samples, 5.64%)</title><rect x="27.4117%" y="645" width="5.6429%" height="15" fill="rgb(206,27,48)"/><text x="27.6617%" y="655.50">alloc_f..</text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (2,052 samples, 5.64%)</title><rect x="27.4117%" y="629" width="5.6429%" height="15" fill="rgb(225,35,8)"/><text x="27.6617%" y="639.50">alloc_f..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter::h9fbb60f564278adb (2,052 samples, 5.64%)</title><rect x="27.4117%" y="613" width="5.6429%" height="15" fill="rgb(250,213,24)"/><text x="27.6617%" y="623.50">&lt;alloc:..</text></g><g><title>__rg_realloc (2,048 samples, 5.63%)</title><rect x="27.4227%" y="597" width="5.6319%" height="15" fill="rgb(247,123,22)"/><text x="27.6727%" y="607.50">__rg_re..</text></g><g><title>Unknown (4,096 samples, 11.26%)</title><rect x="33.0547%" y="805" width="11.2639%" height="15" fill="rgb(231,138,38)"/><text x="33.3047%" y="815.50">Unknown</text></g><g><title>_start (4,096 samples, 11.26%)</title><rect x="33.0547%" y="789" width="11.2639%" height="15" fill="rgb(231,145,46)"/><text x="33.3047%" y="799.50">_start</text></g><g><title>__libc_start_main (4,096 samples, 11.26%)</title><rect x="33.0547%" y="773" width="11.2639%" height="15" fill="rgb(251,118,11)"/><text x="33.3047%" y="783.50">__libc_start_main</text></g><g><title>main (4,096 samples, 11.26%)</title><rect x="33.0547%" y="757" width="11.2639%" height="15" fill="rgb(217,147,25)"/><text x="33.3047%" y="767.50">main</text></g><g><title>std::rt::lang_start_internal::hd7efcfd33686f472/std::panic::catch_unwind::h05e542185e35aabf/std::panicking::try::h28c2e2ec1c3871ce (4,096 samples, 11.26%)</title><rect x="33.0547%" y="741" width="11.2639%" height="15" fill="rgb(247,81,37)"/><text x="33.3047%" y="751.50">std::rt::lang_sta..</text></g><g><title>__rust_maybe_catch_panic (4,096 samples, 11.26%)</title><rect x="33.0547%" y="725" width="11.2639%" height="15" fill="rgb(209,12,38)"/><text x="33.3047%" y="735.50">__rust_maybe_catc..</text></g><g><title>std::panicking::try::do_call::h3210e2ce6a68897b/std::rt::lang_start_internal::{{closure}}::h812f70926ebbddd0 (4,096 samples, 11.26%)</title><rect x="33.0547%" y="709" width="11.2639%" height="15" fill="rgb(227,1,9)"/><text x="33.3047%" y="719.50">std::panicking::t..</text></g><g><title>std::rt::lang_start::{{closure}}::he79ec0169c9d5a53 (4,096 samples, 11.26%)</title><rect x="33.0547%" y="693" width="11.2639%" height="15" fill="rgb(248,47,43)"/><text x="33.3047%" y="703.50">std::rt::lang_sta..</text></g><g><title>alloc_free::main::hc80b97a251692aa3 (4,096 samples, 11.26%)</title><rect x="33.0547%" y="677" width="11.2639%" height="15" fill="rgb(221,10,30)"/><text x="33.3047%" y="687.50">alloc_free::main:..</text></g><g><title>__rg_realloc (4,096 samples, 11.26%)</title><rect x="33.0547%" y="661" width="11.2639%" height="15" fill="rgb(210,229,1)"/><text x="33.3047%" y="671.50">__rg_realloc</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter::h291ca61c1fe3b28d (2,052 samples, 5.64%)</title><rect x="44.3186%" y="789" width="5.6429%" height="15" fill="rgb(222,148,37)"/><text x="44.5686%" y="799.50">&lt;alloc:..</text></g><g><title>__rg_realloc (2,052 samples, 5.64%)</title><rect x="44.3186%" y="773" width="5.6429%" height="15" fill="rgb(234,67,33)"/><text x="44.5686%" y="783.50">__rg_re..</text></g><g><title>Unknown (2,052 samples, 5.64%)</title><rect x="44.3186%" y="757" width="5.6429%" height="15" fill="rgb(247,98,35)"/><text x="44.5686%" y="767.50">Unknown</text></g><g><title>_start (2,052 samples, 5.64%)</title><rect x="44.3186%" y="741" width="5.6429%" height="15" fill="rgb(247,138,52)"/><text x="44.5686%" y="751.50">_start</text></g><g><title>__libc_start_main (2,052 samples, 5.64%)</title><rect x="44.3186%" y="725" width="5.6429%" height="15" fill="rgb(213,79,30)"/><text x="44.5686%" y="735.50">__libc_..</text></g><g><title>main (2,052 samples, 5.64%)</title><rect x="44.3186%" y="709" width="5.6429%" height="15" fill="rgb(246,177,23)"/><text x="44.5686%" y="719.50">main</text></g><g><title>std::rt::lang_start_internal::hd7efcfd33686f472/std::panic::catch_unwind::h05e542185e35aabf/std::panicking::try::h28c2e2ec1c3871ce (2,052 samples, 5.64%)</title><rect x="44.3186%" y="693" width="5.6429%" height="15" fill="rgb(230,62,27)"/><text x="44.5686%" y="703.50">std::rt..</text></g><g><title>__rust_maybe_catch_panic (2,052 samples, 5.64%)</title><rect x="44.3186%" y="677" width="5.6429%" height="15" fill="rgb(216,154,8)"/><text x="44.5686%" y="687.50">__rust_..</text></g><g><title>std::panicking::try::do_call::h3210e2ce6a68897b/std::rt::lang_start_internal::{{closure}}::h812f70926ebbddd0 (2,052 samples, 5.64%)</title><rect x="44.3186%" y="661" width="5.6429%" height="15" fill="rgb(244,35,45)"/><text x="44.5686%" y="671.50">std::pa..</text></g><g><title>std::rt::lang_start::{{closure}}::he79ec0169c9d5a53 (2,052 samples, 5.64%)</title><rect x="44.3186%" y="645" width="5.6429%" height="15" fill="rgb(251,115,12)"/><text x="44.5686%" y="655.50">std::rt..</text></g><g><title>alloc_free::main::hc80b97a251692aa3 (2,052 samples, 5.64%)</title><rect x="44.3186%" y="629" width="5.6429%" height="15" fill="rgb(240,54,50)"/><text x="44.5686%" y="639.50">alloc_f..</text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (2,052 samples, 5.64%)</title><rect x="44.3186%" y="613" width="5.6429%" height="15" fill="rgb(233,84,52)"/><text x="44.5686%" y="623.50">alloc_f..</text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (2,052 samples, 5.64%)</title><rect x="44.3186%" y="597" width="5.6429%" height="15" fill="rgb(207,117,47)"/><text x="44.5686%" y="607.50">alloc_f..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter::h291ca61c1fe3b28d (2,052 samples, 5.64%)</title><rect x="44.3186%" y="581" width="5.6429%" height="15" fill="rgb(249,43,39)"/><text x="44.5686%" y="591.50">&lt;alloc:..</text></g><g><title>__rg_realloc (2,048 samples, 5.63%)</title><rect x="44.3296%" y="565" width="5.6319%" height="15" fill="rgb(209,38,44)"/><text x="44.5796%" y="575.50">__rg_re..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter::h74e96bc70234297c (1,240 samples, 3.41%)</title><rect x="49.9615%" y="789" width="3.4100%" height="15" fill="rgb(236,212,23)"/><text x="50.2115%" y="799.50">&lt;al..</text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold::h260bd8b6ecb4ec80 (1,240 samples, 3.41%)</title><rect x="49.9615%" y="773" width="3.4100%" height="15" fill="rgb(242,79,21)"/><text x="50.2115%" y="783.50">&lt;co..</text></g><g><title>Unknown (1,240 samples, 3.41%)</title><rect x="49.9615%" y="757" width="3.4100%" height="15" fill="rgb(211,96,35)"/><text x="50.2115%" y="767.50">Unk..</text></g><g><title>_start (1,240 samples, 3.41%)</title><rect x="49.9615%" y="741" width="3.4100%" height="15" fill="rgb(253,215,40)"/><text x="50.2115%" y="751.50">_st..</text></g><g><title>__libc_start_main (1,240 samples, 3.41%)</title><rect x="49.9615%" y="725" width="3.4100%" height="15" fill="rgb(211,81,21)"/><text x="50.2115%" y="735.50">__l..</text></g><g><title>main (1,240 samples, 3.41%)</title><rect x="49.9615%" y="709" width="3.4100%" height="15" fill="rgb(208,190,38)"/><text x="50.2115%" y="719.50">main</text></g><g><title>std::rt::lang_start_internal::hd7efcfd33686f472/std::panic::catch_unwind::h05e542185e35aabf/std::panicking::try::h28c2e2ec1c3871ce (1,240 samples, 3.41%)</title><rect x="49.9615%" y="693" width="3.4100%" height="15" fill="rgb(235,213,38)"/><text x="50.2115%" y="703.50">std..</text></g><g><title>__rust_maybe_catch_panic (1,240 samples, 3.41%)</title><rect x="49.9615%" y="677" width="3.4100%" height="15" fill="rgb(237,122,38)"/><text x="50.2115%" y="687.50">__r..</text></g><g><title>std::panicking::try::do_call::h3210e2ce6a68897b/std::rt::lang_start_internal::{{closure}}::h812f70926ebbddd0 (1,240 samples, 3.41%)</title><rect x="49.9615%" y="661" width="3.4100%" height="15" fill="rgb(244,218,35)"/><text x="50.2115%" y="671.50">std..</text></g><g><title>std::rt::lang_start::{{closure}}::he79ec0169c9d5a53 (1,240 samples, 3.41%)</title><rect x="49.9615%" y="645" width="3.4100%" height="15" fill="rgb(240,68,47)"/><text x="50.2115%" y="655.50">std..</text></g><g><title>alloc_free::main::hc80b97a251692aa3 (1,240 samples, 3.41%)</title><rect x="49.9615%" y="629" width="3.4100%" height="15" fill="rgb(210,16,53)"/><text x="50.2115%" y="639.50">all..</text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (1,240 samples, 3.41%)</title><rect x="49.9615%" y="613" width="3.4100%" height="15" fill="rgb(235,124,12)"/><text x="50.2115%" y="623.50">all..</text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (1,240 samples, 3.41%)</title><rect x="49.9615%" y="597" width="3.4100%" height="15" fill="rgb(224,169,11)"/><text x="50.2115%" y="607.50">all..</text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (1,236 samples, 3.40%)</title><rect x="49.9725%" y="581" width="3.3990%" height="15" fill="rgb(250,166,2)"/><text x="50.2225%" y="591.50">all..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter::h74e96bc70234297c (1,236 samples, 3.40%)</title><rect x="49.9725%" y="565" width="3.3990%" height="15" fill="rgb(242,216,29)"/><text x="50.2225%" y="575.50">&lt;al..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter::h9fbb60f564278adb (1,028 samples, 2.83%)</title><rect x="53.3715%" y="789" width="2.8270%" height="15" fill="rgb(230,116,27)"/><text x="53.6215%" y="799.50">&lt;a..</text></g><g><title>__rg_realloc (1,028 samples, 2.83%)</title><rect x="53.3715%" y="773" width="2.8270%" height="15" fill="rgb(228,99,48)"/><text x="53.6215%" y="783.50">__..</text></g><g><title>Unknown (1,028 samples, 2.83%)</title><rect x="53.3715%" y="757" width="2.8270%" height="15" fill="rgb(253,11,6)"/><text x="53.6215%" y="767.50">Un..</text></g><g><title>_start (1,028 samples, 2.83%)</title><rect x="53.3715%" y="741" width="2.8270%" height="15" fill="rgb(247,143,39)"/><text x="53.6215%" y="751.50">_s..</text></g><g><title>__libc_start_main (1,028 samples, 2.83%)</title><rect x="53.3715%" y="725" width="2.8270%" height="15" fill="rgb(236,97,10)"/><text x="53.6215%" y="735.50">__..</text></g><g><title>main (1,028 samples, 2.83%)</title><rect x="53.3715%" y="709" width="2.8270%" height="15" fill="rgb(233,208,19)"/><text x="53.6215%" y="719.50">ma..</text></g><g><title>std::rt::lang_start_internal::hd7efcfd33686f472/std::panic::catch_unwind::h05e542185e35aabf/std::panicking::try::h28c2e2ec1c3871ce (1,028 samples, 2.83%)</title><rect x="53.3715%" y="693" width="2.8270%" height="15" fill="rgb(216,164,2)"/><text x="53.6215%" y="703.50">st..</text></g><g><title>__rust_maybe_catch_panic (1,028 samples, 2.83%)</title><rect x="53.3715%" y="677" width="2.8270%" height="15" fill="rgb(220,129,5)"/><text x="53.6215%" y="687.50">__..</text></g><g><title>std::panicking::try::do_call::h3210e2ce6a68897b/std::rt::lang_start_internal::{{closure}}::h812f70926ebbddd0 (1,028 samples, 2.83%)</title><rect x="53.3715%" y="661" width="2.8270%" height="15" fill="rgb(242,17,10)"/><text x="53.6215%" y="671.50">st..</text></g><g><title>std::rt::lang_start::{{closure}}::he79ec0169c9d5a53 (1,028 samples, 2.83%)</title><rect x="53.3715%" y="645" width="2.8270%" height="15" fill="rgb(242,107,0)"/><text x="53.6215%" y="655.50">st..</text></g><g><title>alloc_free::main::hc80b97a251692aa3 (1,028 samples, 2.83%)</title><rect x="53.3715%" y="629" width="2.8270%" height="15" fill="rgb(251,28,31)"/><text x="53.6215%" y="639.50">al..</text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (1,028 samples, 2.83%)</title><rect x="53.3715%" y="613" width="2.8270%" height="15" fill="rgb(233,223,10)"/><text x="53.6215%" y="623.50">al..</text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (1,028 samples, 2.83%)</title><rect x="53.3715%" y="597" width="2.8270%" height="15" fill="rgb(215,21,27)"/><text x="53.6215%" y="607.50">al..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter::h9fbb60f564278adb (1,028 samples, 2.83%)</title><rect x="53.3715%" y="581" width="2.8270%" height="15" fill="rgb(232,23,21)"/><text x="53.6215%" y="591.50">&lt;a..</text></g><g><title>__rg_realloc (1,024 samples, 2.82%)</title><rect x="53.3825%" y="565" width="2.8160%" height="15" fill="rgb(244,5,23)"/><text x="53.6325%" y="575.50">__..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter::h291ca61c1fe3b28d (512 samples, 1.41%)</title><rect x="56.1984%" y="629" width="1.4080%" height="15" fill="rgb(226,81,46)"/><text x="56.4484%" y="639.50"></text></g><g><title>__rg_realloc (512 samples, 1.41%)</title><rect x="56.1984%" y="613" width="1.4080%" height="15" fill="rgb(247,70,30)"/><text x="56.4484%" y="623.50"></text></g><g><title>Unknown (4,608 samples, 12.67%)</title><rect x="56.1984%" y="789" width="12.6719%" height="15" fill="rgb(212,68,19)"/><text x="56.4484%" y="799.50">Unknown</text></g><g><title>_start (4,608 samples, 12.67%)</title><rect x="56.1984%" y="773" width="12.6719%" height="15" fill="rgb(240,187,13)"/><text x="56.4484%" y="783.50">_start</text></g><g><title>__libc_start_main (4,608 samples, 12.67%)</title><rect x="56.1984%" y="757" width="12.6719%" height="15" fill="rgb(223,113,26)"/><text x="56.4484%" y="767.50">__libc_start_main</text></g><g><title>main (4,608 samples, 12.67%)</title><rect x="56.1984%" y="741" width="12.6719%" height="15" fill="rgb(206,192,2)"/><text x="56.4484%" y="751.50">main</text></g><g><title>std::rt::lang_start_internal::hd7efcfd33686f472/std::panic::catch_unwind::h05e542185e35aabf/std::panicking::try::h28c2e2ec1c3871ce (4,608 samples, 12.67%)</title><rect x="56.1984%" y="725" width="12.6719%" height="15" fill="rgb(241,108,4)"/><text x="56.4484%" y="735.50">std::rt::lang_start..</text></g><g><title>__rust_maybe_catch_panic (4,608 samples, 12.67%)</title><rect x="56.1984%" y="709" width="12.6719%" height="15" fill="rgb(247,173,49)"/><text x="56.4484%" y="719.50">__rust_maybe_catch_..</text></g><g><title>std::panicking::try::do_call::h3210e2ce6a68897b/std::rt::lang_start_internal::{{closure}}::h812f70926ebbddd0 (4,608 samples, 12.67%)</title><rect x="56.1984%" y="693" width="12.6719%" height="15" fill="rgb(224,114,35)"/><text x="56.4484%" y="703.50">std::panicking::try..</text></g><g><title>std::rt::lang_start::{{closure}}::he79ec0169c9d5a53 (4,608 samples, 12.67%)</title><rect x="56.1984%" y="677" width="12.6719%" height="15" fill="rgb(245,159,27)"/><text x="56.4484%" y="687.50">std::rt::lang_start..</text></g><g><title>alloc_free::main::hc80b97a251692aa3 (4,608 samples, 12.67%)</title><rect x="56.1984%" y="661" width="12.6719%" height="15" fill="rgb(245,172,44)"/><text x="56.4484%" y="671.50">alloc_free::main::h..</text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (4,608 samples, 12.67%)</title><rect x="56.1984%" y="645" width="12.6719%" height="15" fill="rgb(236,23,11)"/><text x="56.4484%" y="655.50">alloc_free::quick_s..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter::h9fbb60f564278adb (4,096 samples, 11.26%)</title><rect x="57.6064%" y="629" width="11.2639%" height="15" fill="rgb(205,117,38)"/><text x="57.8564%" y="639.50">&lt;alloc::vec::Vec&lt;..</text></g><g><title>__rg_realloc (4,096 samples, 11.26%)</title><rect x="57.6064%" y="613" width="11.2639%" height="15" fill="rgb(237,72,25)"/><text x="57.8564%" y="623.50">__rg_realloc</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter::h291ca61c1fe3b28d (1,028 samples, 2.83%)</title><rect x="68.8703%" y="773" width="2.8270%" height="15" fill="rgb(244,70,9)"/><text x="69.1203%" y="783.50">&lt;a..</text></g><g><title>__rg_realloc (1,028 samples, 2.83%)</title><rect x="68.8703%" y="757" width="2.8270%" height="15" fill="rgb(217,125,39)"/><text x="69.1203%" y="767.50">__..</text></g><g><title>Unknown (1,028 samples, 2.83%)</title><rect x="68.8703%" y="741" width="2.8270%" height="15" fill="rgb(235,36,10)"/><text x="69.1203%" y="751.50">Un..</text></g><g><title>_start (1,028 samples, 2.83%)</title><rect x="68.8703%" y="725" width="2.8270%" height="15" fill="rgb(251,123,47)"/><text x="69.1203%" y="735.50">_s..</text></g><g><title>__libc_start_main (1,028 samples, 2.83%)</title><rect x="68.8703%" y="709" width="2.8270%" height="15" fill="rgb(221,13,13)"/><text x="69.1203%" y="719.50">__..</text></g><g><title>main (1,028 samples, 2.83%)</title><rect x="68.8703%" y="693" width="2.8270%" height="15" fill="rgb(238,131,9)"/><text x="69.1203%" y="703.50">ma..</text></g><g><title>std::rt::lang_start_internal::hd7efcfd33686f472/std::panic::catch_unwind::h05e542185e35aabf/std::panicking::try::h28c2e2ec1c3871ce (1,028 samples, 2.83%)</title><rect x="68.8703%" y="677" width="2.8270%" height="15" fill="rgb(211,50,8)"/><text x="69.1203%" y="687.50">st..</text></g><g><title>__rust_maybe_catch_panic (1,028 samples, 2.83%)</title><rect x="68.8703%" y="661" width="2.8270%" height="15" fill="rgb(245,182,24)"/><text x="69.1203%" y="671.50">__..</text></g><g><title>std::panicking::try::do_call::h3210e2ce6a68897b/std::rt::lang_start_internal::{{closure}}::h812f70926ebbddd0 (1,028 samples, 2.83%)</title><rect x="68.8703%" y="645" width="2.8270%" height="15" fill="rgb(242,14,37)"/><text x="69.1203%" y="655.50">st..</text></g><g><title>std::rt::lang_start::{{closure}}::he79ec0169c9d5a53 (1,028 samples, 2.83%)</title><rect x="68.8703%" y="629" width="2.8270%" height="15" fill="rgb(246,228,12)"/><text x="69.1203%" y="639.50">st..</text></g><g><title>alloc_free::main::hc80b97a251692aa3 (1,028 samples, 2.83%)</title><rect x="68.8703%" y="613" width="2.8270%" height="15" fill="rgb(213,55,15)"/><text x="69.1203%" y="623.50">al..</text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (1,028 samples, 2.83%)</title><rect x="68.8703%" y="597" width="2.8270%" height="15" fill="rgb(209,9,3)"/><text x="69.1203%" y="607.50">al..</text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (1,028 samples, 2.83%)</title><rect x="68.8703%" y="581" width="2.8270%" height="15" fill="rgb(230,59,30)"/><text x="69.1203%" y="591.50">al..</text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (1,028 samples, 2.83%)</title><rect x="68.8703%" y="565" width="2.8270%" height="15" fill="rgb(209,121,21)"/><text x="69.1203%" y="575.50">al..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter::h291ca61c1fe3b28d (1,028 samples, 2.83%)</title><rect x="68.8703%" y="549" width="2.8270%" height="15" fill="rgb(220,109,13)"/><text x="69.1203%" y="559.50">&lt;a..</text></g><g><title>__rg_realloc (1,024 samples, 2.82%)</title><rect x="68.8813%" y="533" width="2.8160%" height="15" fill="rgb(232,18,1)"/><text x="69.1313%" y="543.50">__..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter::h74e96bc70234297c (88 samples, 0.24%)</title><rect x="71.6973%" y="773" width="0.2420%" height="15" fill="rgb(215,41,42)"/><text x="71.9473%" y="783.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold::h260bd8b6ecb4ec80 (88 samples, 0.24%)</title><rect x="71.6973%" y="757" width="0.2420%" height="15" fill="rgb(224,123,36)"/><text x="71.9473%" y="767.50"></text></g><g><title>Unknown (88 samples, 0.24%)</title><rect x="71.6973%" y="741" width="0.2420%" height="15" fill="rgb(240,125,3)"/><text x="71.9473%" y="751.50"></text></g><g><title>_start (88 samples, 0.24%)</title><rect x="71.6973%" y="725" width="0.2420%" height="15" fill="rgb(205,98,50)"/><text x="71.9473%" y="735.50"></text></g><g><title>__libc_start_main (88 samples, 0.24%)</title><rect x="71.6973%" y="709" width="0.2420%" height="15" fill="rgb(205,185,37)"/><text x="71.9473%" y="719.50"></text></g><g><title>main (88 samples, 0.24%)</title><rect x="71.6973%" y="693" width="0.2420%" height="15" fill="rgb(238,207,15)"/><text x="71.9473%" y="703.50"></text></g><g><title>std::rt::lang_start_internal::hd7efcfd33686f472/std::panic::catch_unwind::h05e542185e35aabf/std::panicking::try::h28c2e2ec1c3871ce (88 samples, 0.24%)</title><rect x="71.6973%" y="677" width="0.2420%" height="15" fill="rgb(213,199,42)"/><text x="71.9473%" y="687.50"></text></g><g><title>__rust_maybe_catch_panic (88 samples, 0.24%)</title><rect x="71.6973%" y="661" width="0.2420%" height="15" fill="rgb(235,201,11)"/><text x="71.9473%" y="671.50"></text></g><g><title>std::panicking::try::do_call::h3210e2ce6a68897b/std::rt::lang_start_internal::{{closure}}::h812f70926ebbddd0 (88 samples, 0.24%)</title><rect x="71.6973%" y="645" width="0.2420%" height="15" fill="rgb(207,46,11)"/><text x="71.9473%" y="655.50"></text></g><g><title>std::rt::lang_start::{{closure}}::he79ec0169c9d5a53 (88 samples, 0.24%)</title><rect x="71.6973%" y="629" width="0.2420%" height="15" fill="rgb(241,35,35)"/><text x="71.9473%" y="639.50"></text></g><g><title>alloc_free::main::hc80b97a251692aa3 (88 samples, 0.24%)</title><rect x="71.6973%" y="613" width="0.2420%" height="15" fill="rgb(243,32,47)"/><text x="71.9473%" y="623.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (88 samples, 0.24%)</title><rect x="71.6973%" y="597" width="0.2420%" height="15" fill="rgb(247,202,23)"/><text x="71.9473%" y="607.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (88 samples, 0.24%)</title><rect x="71.6973%" y="581" width="0.2420%" height="15" fill="rgb(219,102,11)"/><text x="71.9473%" y="591.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (88 samples, 0.24%)</title><rect x="71.6973%" y="565" width="0.2420%" height="15" fill="rgb(243,110,44)"/><text x="71.9473%" y="575.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (84 samples, 0.23%)</title><rect x="71.7083%" y="549" width="0.2310%" height="15" fill="rgb(222,74,54)"/><text x="71.9583%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter::h74e96bc70234297c (84 samples, 0.23%)</title><rect x="71.7083%" y="533" width="0.2310%" height="15" fill="rgb(216,99,12)"/><text x="71.9583%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter::h9fbb60f564278adb (68 samples, 0.19%)</title><rect x="71.9393%" y="773" width="0.1870%" height="15" fill="rgb(226,22,26)"/><text x="72.1893%" y="783.50"></text></g><g><title>__rg_realloc (68 samples, 0.19%)</title><rect x="71.9393%" y="757" width="0.1870%" height="15" fill="rgb(217,163,10)"/><text x="72.1893%" y="767.50"></text></g><g><title>Unknown (68 samples, 0.19%)</title><rect x="71.9393%" y="741" width="0.1870%" height="15" fill="rgb(213,25,53)"/><text x="72.1893%" y="751.50"></text></g><g><title>_start (68 samples, 0.19%)</title><rect x="71.9393%" y="725" width="0.1870%" height="15" fill="rgb(252,105,26)"/><text x="72.1893%" y="735.50"></text></g><g><title>__libc_start_main (68 samples, 0.19%)</title><rect x="71.9393%" y="709" width="0.1870%" height="15" fill="rgb(220,39,43)"/><text x="72.1893%" y="719.50"></text></g><g><title>main (68 samples, 0.19%)</title><rect x="71.9393%" y="693" width="0.1870%" height="15" fill="rgb(229,68,48)"/><text x="72.1893%" y="703.50"></text></g><g><title>std::rt::lang_start_internal::hd7efcfd33686f472/std::panic::catch_unwind::h05e542185e35aabf/std::panicking::try::h28c2e2ec1c3871ce (68 samples, 0.19%)</title><rect x="71.9393%" y="677" width="0.1870%" height="15" fill="rgb(252,8,32)"/><text x="72.1893%" y="687.50"></text></g><g><title>__rust_maybe_catch_panic (68 samples, 0.19%)</title><rect x="71.9393%" y="661" width="0.1870%" height="15" fill="rgb(223,20,43)"/><text x="72.1893%" y="671.50"></text></g><g><title>std::panicking::try::do_call::h3210e2ce6a68897b/std::rt::lang_start_internal::{{closure}}::h812f70926ebbddd0 (68 samples, 0.19%)</title><rect x="71.9393%" y="645" width="0.1870%" height="15" fill="rgb(229,81,49)"/><text x="72.1893%" y="655.50"></text></g><g><title>std::rt::lang_start::{{closure}}::he79ec0169c9d5a53 (68 samples, 0.19%)</title><rect x="71.9393%" y="629" width="0.1870%" height="15" fill="rgb(236,28,36)"/><text x="72.1893%" y="639.50"></text></g><g><title>alloc_free::main::hc80b97a251692aa3 (68 samples, 0.19%)</title><rect x="71.9393%" y="613" width="0.1870%" height="15" fill="rgb(249,185,26)"/><text x="72.1893%" y="623.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (68 samples, 0.19%)</title><rect x="71.9393%" y="597" width="0.1870%" height="15" fill="rgb(249,174,33)"/><text x="72.1893%" y="607.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (68 samples, 0.19%)</title><rect x="71.9393%" y="581" width="0.1870%" height="15" fill="rgb(233,201,37)"/><text x="72.1893%" y="591.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (68 samples, 0.19%)</title><rect x="71.9393%" y="565" width="0.1870%" height="15" fill="rgb(221,78,26)"/><text x="72.1893%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter::h9fbb60f564278adb (68 samples, 0.19%)</title><rect x="71.9393%" y="549" width="0.1870%" height="15" fill="rgb(250,127,30)"/><text x="72.1893%" y="559.50"></text></g><g><title>__rg_realloc (64 samples, 0.18%)</title><rect x="71.9503%" y="533" width="0.1760%" height="15" fill="rgb(230,49,44)"/><text x="72.2003%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter::h291ca61c1fe3b28d (4,096 samples, 11.26%)</title><rect x="72.1263%" y="597" width="11.2639%" height="15" fill="rgb(229,67,23)"/><text x="72.3763%" y="607.50">&lt;alloc::vec::Vec&lt;..</text></g><g><title>__rg_realloc (4,096 samples, 11.26%)</title><rect x="72.1263%" y="581" width="11.2639%" height="15" fill="rgb(249,83,47)"/><text x="72.3763%" y="591.50">__rg_realloc</text></g><g><title>Unknown (6,144 samples, 16.90%)</title><rect x="72.1263%" y="773" width="16.8958%" height="15" fill="rgb(215,43,3)"/><text x="72.3763%" y="783.50">Unknown</text></g><g><title>_start (6,144 samples, 16.90%)</title><rect x="72.1263%" y="757" width="16.8958%" height="15" fill="rgb(238,154,13)"/><text x="72.3763%" y="767.50">_start</text></g><g><title>__libc_start_main (6,144 samples, 16.90%)</title><rect x="72.1263%" y="741" width="16.8958%" height="15" fill="rgb(219,56,2)"/><text x="72.3763%" y="751.50">__libc_start_main</text></g><g><title>main (6,144 samples, 16.90%)</title><rect x="72.1263%" y="725" width="16.8958%" height="15" fill="rgb(233,0,4)"/><text x="72.3763%" y="735.50">main</text></g><g><title>std::rt::lang_start_internal::hd7efcfd33686f472/std::panic::catch_unwind::h05e542185e35aabf/std::panicking::try::h28c2e2ec1c3871ce (6,144 samples, 16.90%)</title><rect x="72.1263%" y="709" width="16.8958%" height="15" fill="rgb(235,30,7)"/><text x="72.3763%" y="719.50">std::rt::lang_start_intern..</text></g><g><title>__rust_maybe_catch_panic (6,144 samples, 16.90%)</title><rect x="72.1263%" y="693" width="16.8958%" height="15" fill="rgb(250,79,13)"/><text x="72.3763%" y="703.50">__rust_maybe_catch_panic</text></g><g><title>std::panicking::try::do_call::h3210e2ce6a68897b/std::rt::lang_start_internal::{{closure}}::h812f70926ebbddd0 (6,144 samples, 16.90%)</title><rect x="72.1263%" y="677" width="16.8958%" height="15" fill="rgb(211,146,34)"/><text x="72.3763%" y="687.50">std::panicking::try::do_ca..</text></g><g><title>std::rt::lang_start::{{closure}}::he79ec0169c9d5a53 (6,144 samples, 16.90%)</title><rect x="72.1263%" y="661" width="16.8958%" height="15" fill="rgb(228,22,38)"/><text x="72.3763%" y="671.50">std::rt::lang_start::{{clo..</text></g><g><title>alloc_free::main::hc80b97a251692aa3 (6,144 samples, 16.90%)</title><rect x="72.1263%" y="645" width="16.8958%" height="15" fill="rgb(235,168,5)"/><text x="72.3763%" y="655.50">alloc_free::main::hc80b97a..</text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (6,144 samples, 16.90%)</title><rect x="72.1263%" y="629" width="16.8958%" height="15" fill="rgb(221,155,16)"/><text x="72.3763%" y="639.50">alloc_free::quick_sort::h6..</text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (6,144 samples, 16.90%)</title><rect x="72.1263%" y="613" width="16.8958%" height="15" fill="rgb(215,215,53)"/><text x="72.3763%" y="623.50">alloc_free::quick_sort::h6..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter::h9fbb60f564278adb (2,048 samples, 5.63%)</title><rect x="83.3902%" y="597" width="5.6319%" height="15" fill="rgb(223,4,10)"/><text x="83.6402%" y="607.50">&lt;alloc:..</text></g><g><title>__rg_realloc (2,048 samples, 5.63%)</title><rect x="83.3902%" y="581" width="5.6319%" height="15" fill="rgb(234,103,6)"/><text x="83.6402%" y="591.50">__rg_re..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter::h74e96bc70234297c (44 samples, 0.12%)</title><rect x="89.1211%" y="757" width="0.1210%" height="15" fill="rgb(227,97,0)"/><text x="89.3711%" y="767.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold::h260bd8b6ecb4ec80 (44 samples, 0.12%)</title><rect x="89.1211%" y="741" width="0.1210%" height="15" fill="rgb(234,150,53)"/><text x="89.3711%" y="751.50"></text></g><g><title>Unknown (44 samples, 0.12%)</title><rect x="89.1211%" y="725" width="0.1210%" height="15" fill="rgb(228,201,54)"/><text x="89.3711%" y="735.50"></text></g><g><title>_start (44 samples, 0.12%)</title><rect x="89.1211%" y="709" width="0.1210%" height="15" fill="rgb(222,22,37)"/><text x="89.3711%" y="719.50"></text></g><g><title>__libc_start_main (44 samples, 0.12%)</title><rect x="89.1211%" y="693" width="0.1210%" height="15" fill="rgb(237,53,32)"/><text x="89.3711%" y="703.50"></text></g><g><title>main (44 samples, 0.12%)</title><rect x="89.1211%" y="677" width="0.1210%" height="15" fill="rgb(233,25,53)"/><text x="89.3711%" y="687.50"></text></g><g><title>std::rt::lang_start_internal::hd7efcfd33686f472/std::panic::catch_unwind::h05e542185e35aabf/std::panicking::try::h28c2e2ec1c3871ce (44 samples, 0.12%)</title><rect x="89.1211%" y="661" width="0.1210%" height="15" fill="rgb(210,40,34)"/><text x="89.3711%" y="671.50"></text></g><g><title>__rust_maybe_catch_panic (44 samples, 0.12%)</title><rect x="89.1211%" y="645" width="0.1210%" height="15" fill="rgb(241,220,44)"/><text x="89.3711%" y="655.50"></text></g><g><title>std::panicking::try::do_call::h3210e2ce6a68897b/std::rt::lang_start_internal::{{closure}}::h812f70926ebbddd0 (44 samples, 0.12%)</title><rect x="89.1211%" y="629" width="0.1210%" height="15" fill="rgb(235,28,35)"/><text x="89.3711%" y="639.50"></text></g><g><title>std::rt::lang_start::{{closure}}::he79ec0169c9d5a53 (44 samples, 0.12%)</title><rect x="89.1211%" y="613" width="0.1210%" height="15" fill="rgb(210,56,17)"/><text x="89.3711%" y="623.50"></text></g><g><title>alloc_free::main::hc80b97a251692aa3 (44 samples, 0.12%)</title><rect x="89.1211%" y="597" width="0.1210%" height="15" fill="rgb(224,130,29)"/><text x="89.3711%" y="607.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (44 samples, 0.12%)</title><rect x="89.1211%" y="581" width="0.1210%" height="15" fill="rgb(235,212,8)"/><text x="89.3711%" y="591.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (44 samples, 0.12%)</title><rect x="89.1211%" y="565" width="0.1210%" height="15" fill="rgb(223,33,50)"/><text x="89.3711%" y="575.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (44 samples, 0.12%)</title><rect x="89.1211%" y="549" width="0.1210%" height="15" fill="rgb(219,149,13)"/><text x="89.3711%" y="559.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (44 samples, 0.12%)</title><rect x="89.1211%" y="533" width="0.1210%" height="15" fill="rgb(250,156,29)"/><text x="89.3711%" y="543.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (40 samples, 0.11%)</title><rect x="89.1321%" y="517" width="0.1100%" height="15" fill="rgb(216,193,19)"/><text x="89.3821%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter::h74e96bc70234297c (40 samples, 0.11%)</title><rect x="89.1321%" y="501" width="0.1100%" height="15" fill="rgb(216,135,14)"/><text x="89.3821%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter::h291ca61c1fe3b28d (2,048 samples, 5.63%)</title><rect x="89.3411%" y="565" width="5.6319%" height="15" fill="rgb(241,47,5)"/><text x="89.5911%" y="575.50">&lt;alloc:..</text></g><g><title>__rg_realloc (2,048 samples, 5.63%)</title><rect x="89.3411%" y="549" width="5.6319%" height="15" fill="rgb(233,42,35)"/><text x="89.5911%" y="559.50">__rg_re..</text></g><g><title>Unknown (2,176 samples, 5.98%)</title><rect x="89.3411%" y="757" width="5.9839%" height="15" fill="rgb(231,13,6)"/><text x="89.5911%" y="767.50">Unknown</text></g><g><title>_start (2,176 samples, 5.98%)</title><rect x="89.3411%" y="741" width="5.9839%" height="15" fill="rgb(207,181,40)"/><text x="89.5911%" y="751.50">_start</text></g><g><title>__libc_start_main (2,176 samples, 5.98%)</title><rect x="89.3411%" y="725" width="5.9839%" height="15" fill="rgb(254,173,49)"/><text x="89.5911%" y="735.50">__libc_s..</text></g><g><title>main (2,176 samples, 5.98%)</title><rect x="89.3411%" y="709" width="5.9839%" height="15" fill="rgb(221,1,38)"/><text x="89.5911%" y="719.50">main</text></g><g><title>std::rt::lang_start_internal::hd7efcfd33686f472/std::panic::catch_unwind::h05e542185e35aabf/std::panicking::try::h28c2e2ec1c3871ce (2,176 samples, 5.98%)</title><rect x="89.3411%" y="693" width="5.9839%" height="15" fill="rgb(206,124,46)"/><text x="89.5911%" y="703.50">std::rt:..</text></g><g><title>__rust_maybe_catch_panic (2,176 samples, 5.98%)</title><rect x="89.3411%" y="677" width="5.9839%" height="15" fill="rgb(249,21,11)"/><text x="89.5911%" y="687.50">__rust_m..</text></g><g><title>std::panicking::try::do_call::h3210e2ce6a68897b/std::rt::lang_start_internal::{{closure}}::h812f70926ebbddd0 (2,176 samples, 5.98%)</title><rect x="89.3411%" y="661" width="5.9839%" height="15" fill="rgb(222,201,40)"/><text x="89.5911%" y="671.50">std::pan..</text></g><g><title>std::rt::lang_start::{{closure}}::he79ec0169c9d5a53 (2,176 samples, 5.98%)</title><rect x="89.3411%" y="645" width="5.9839%" height="15" fill="rgb(235,61,29)"/><text x="89.5911%" y="655.50">std::rt:..</text></g><g><title>alloc_free::main::hc80b97a251692aa3 (2,176 samples, 5.98%)</title><rect x="89.3411%" y="629" width="5.9839%" height="15" fill="rgb(219,207,3)"/><text x="89.5911%" y="639.50">alloc_fr..</text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (2,176 samples, 5.98%)</title><rect x="89.3411%" y="613" width="5.9839%" height="15" fill="rgb(222,56,46)"/><text x="89.5911%" y="623.50">alloc_fr..</text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (2,176 samples, 5.98%)</title><rect x="89.3411%" y="597" width="5.9839%" height="15" fill="rgb(239,76,54)"/><text x="89.5911%" y="607.50">alloc_fr..</text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (2,176 samples, 5.98%)</title><rect x="89.3411%" y="581" width="5.9839%" height="15" fill="rgb(231,124,27)"/><text x="89.5911%" y="591.50">alloc_fr..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter::h9fbb60f564278adb (128 samples, 0.35%)</title><rect x="94.9731%" y="565" width="0.3520%" height="15" fill="rgb(249,195,6)"/><text x="95.2231%" y="575.50"></text></g><g><title>__rg_realloc (128 samples, 0.35%)</title><rect x="94.9731%" y="549" width="0.3520%" height="15" fill="rgb(237,174,47)"/><text x="95.2231%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter::h291ca61c1fe3b28d (64 samples, 0.18%)</title><rect x="95.5340%" y="533" width="0.1760%" height="15" fill="rgb(206,201,31)"/><text x="95.7840%" y="543.50"></text></g><g><title>__rg_realloc (64 samples, 0.18%)</title><rect x="95.5340%" y="517" width="0.1760%" height="15" fill="rgb(231,57,52)"/><text x="95.7840%" y="527.50"></text></g><g><title>Unknown (128 samples, 0.35%)</title><rect x="95.5340%" y="741" width="0.3520%" height="15" fill="rgb(248,177,22)"/><text x="95.7840%" y="751.50"></text></g><g><title>_start (128 samples, 0.35%)</title><rect x="95.5340%" y="725" width="0.3520%" height="15" fill="rgb(215,211,37)"/><text x="95.7840%" y="735.50"></text></g><g><title>__libc_start_main (128 samples, 0.35%)</title><rect x="95.5340%" y="709" width="0.3520%" height="15" fill="rgb(241,128,51)"/><text x="95.7840%" y="719.50"></text></g><g><title>main (128 samples, 0.35%)</title><rect x="95.5340%" y="693" width="0.3520%" height="15" fill="rgb(227,165,31)"/><text x="95.7840%" y="703.50"></text></g><g><title>std::rt::lang_start_internal::hd7efcfd33686f472/std::panic::catch_unwind::h05e542185e35aabf/std::panicking::try::h28c2e2ec1c3871ce (128 samples, 0.35%)</title><rect x="95.5340%" y="677" width="0.3520%" height="15" fill="rgb(228,167,24)"/><text x="95.7840%" y="687.50"></text></g><g><title>__rust_maybe_catch_panic (128 samples, 0.35%)</title><rect x="95.5340%" y="661" width="0.3520%" height="15" fill="rgb(228,143,12)"/><text x="95.7840%" y="671.50"></text></g><g><title>std::panicking::try::do_call::h3210e2ce6a68897b/std::rt::lang_start_internal::{{closure}}::h812f70926ebbddd0 (128 samples, 0.35%)</title><rect x="95.5340%" y="645" width="0.3520%" height="15" fill="rgb(249,149,8)"/><text x="95.7840%" y="655.50"></text></g><g><title>std::rt::lang_start::{{closure}}::he79ec0169c9d5a53 (128 samples, 0.35%)</title><rect x="95.5340%" y="629" width="0.3520%" height="15" fill="rgb(243,35,44)"/><text x="95.7840%" y="639.50"></text></g><g><title>alloc_free::main::hc80b97a251692aa3 (128 samples, 0.35%)</title><rect x="95.5340%" y="613" width="0.3520%" height="15" fill="rgb(246,89,9)"/><text x="95.7840%" y="623.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (128 samples, 0.35%)</title><rect x="95.5340%" y="597" width="0.3520%" height="15" fill="rgb(233,213,13)"/><text x="95.7840%" y="607.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (128 samples, 0.35%)</title><rect x="95.5340%" y="581" width="0.3520%" height="15" fill="rgb(233,141,41)"/><text x="95.7840%" y="591.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (128 samples, 0.35%)</title><rect x="95.5340%" y="565" width="0.3520%" height="15" fill="rgb(239,167,4)"/><text x="95.7840%" y="575.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (128 samples, 0.35%)</title><rect x="95.5340%" y="549" width="0.3520%" height="15" fill="rgb(209,217,16)"/><text x="95.7840%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter::h9fbb60f564278adb (64 samples, 0.18%)</title><rect x="95.7100%" y="533" width="0.1760%" height="15" fill="rgb(219,88,35)"/><text x="95.9600%" y="543.50"></text></g><g><title>__rg_realloc (64 samples, 0.18%)</title><rect x="95.7100%" y="517" width="0.1760%" height="15" fill="rgb(220,193,23)"/><text x="95.9600%" y="527.50"></text></g><g><title>Unknown (44 samples, 0.12%)</title><rect x="96.0510%" y="725" width="0.1210%" height="15" fill="rgb(230,90,52)"/><text x="96.3010%" y="735.50"></text></g><g><title>_start (44 samples, 0.12%)</title><rect x="96.0510%" y="709" width="0.1210%" height="15" fill="rgb(252,106,19)"/><text x="96.3010%" y="719.50"></text></g><g><title>__libc_start_main (44 samples, 0.12%)</title><rect x="96.0510%" y="693" width="0.1210%" height="15" fill="rgb(206,74,20)"/><text x="96.3010%" y="703.50"></text></g><g><title>main (44 samples, 0.12%)</title><rect x="96.0510%" y="677" width="0.1210%" height="15" fill="rgb(230,138,44)"/><text x="96.3010%" y="687.50"></text></g><g><title>std::rt::lang_start_internal::hd7efcfd33686f472/std::panic::catch_unwind::h05e542185e35aabf/std::panicking::try::h28c2e2ec1c3871ce (44 samples, 0.12%)</title><rect x="96.0510%" y="661" width="0.1210%" height="15" fill="rgb(235,182,43)"/><text x="96.3010%" y="671.50"></text></g><g><title>__rust_maybe_catch_panic (44 samples, 0.12%)</title><rect x="96.0510%" y="645" width="0.1210%" height="15" fill="rgb(242,16,51)"/><text x="96.3010%" y="655.50"></text></g><g><title>std::panicking::try::do_call::h3210e2ce6a68897b/std::rt::lang_start_internal::{{closure}}::h812f70926ebbddd0 (44 samples, 0.12%)</title><rect x="96.0510%" y="629" width="0.1210%" height="15" fill="rgb(248,9,4)"/><text x="96.3010%" y="639.50"></text></g><g><title>std::rt::lang_start::{{closure}}::he79ec0169c9d5a53 (44 samples, 0.12%)</title><rect x="96.0510%" y="613" width="0.1210%" height="15" fill="rgb(210,31,22)"/><text x="96.3010%" y="623.50"></text></g><g><title>alloc_free::main::hc80b97a251692aa3 (44 samples, 0.12%)</title><rect x="96.0510%" y="597" width="0.1210%" height="15" fill="rgb(239,54,39)"/><text x="96.3010%" y="607.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (44 samples, 0.12%)</title><rect x="96.0510%" y="581" width="0.1210%" height="15" fill="rgb(230,99,41)"/><text x="96.3010%" y="591.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (44 samples, 0.12%)</title><rect x="96.0510%" y="565" width="0.1210%" height="15" fill="rgb(253,106,12)"/><text x="96.3010%" y="575.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (44 samples, 0.12%)</title><rect x="96.0510%" y="549" width="0.1210%" height="15" fill="rgb(213,46,41)"/><text x="96.3010%" y="559.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (44 samples, 0.12%)</title><rect x="96.0510%" y="533" width="0.1210%" height="15" fill="rgb(215,133,35)"/><text x="96.3010%" y="543.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (44 samples, 0.12%)</title><rect x="96.0510%" y="517" width="0.1210%" height="15" fill="rgb(213,28,5)"/><text x="96.3010%" y="527.50"></text></g><g><title>Unknown (56 samples, 0.15%)</title><rect x="96.2930%" y="709" width="0.1540%" height="15" fill="rgb(215,77,49)"/><text x="96.5430%" y="719.50"></text></g><g><title>_start (56 samples, 0.15%)</title><rect x="96.2930%" y="693" width="0.1540%" height="15" fill="rgb(248,100,22)"/><text x="96.5430%" y="703.50"></text></g><g><title>__libc_start_main (56 samples, 0.15%)</title><rect x="96.2930%" y="677" width="0.1540%" height="15" fill="rgb(208,67,9)"/><text x="96.5430%" y="687.50"></text></g><g><title>main (56 samples, 0.15%)</title><rect x="96.2930%" y="661" width="0.1540%" height="15" fill="rgb(219,133,21)"/><text x="96.5430%" y="671.50"></text></g><g><title>std::rt::lang_start_internal::hd7efcfd33686f472/std::panic::catch_unwind::h05e542185e35aabf/std::panicking::try::h28c2e2ec1c3871ce (56 samples, 0.15%)</title><rect x="96.2930%" y="645" width="0.1540%" height="15" fill="rgb(246,46,29)"/><text x="96.5430%" y="655.50"></text></g><g><title>__rust_maybe_catch_panic (56 samples, 0.15%)</title><rect x="96.2930%" y="629" width="0.1540%" height="15" fill="rgb(246,185,52)"/><text x="96.5430%" y="639.50"></text></g><g><title>std::panicking::try::do_call::h3210e2ce6a68897b/std::rt::lang_start_internal::{{closure}}::h812f70926ebbddd0 (56 samples, 0.15%)</title><rect x="96.2930%" y="613" width="0.1540%" height="15" fill="rgb(252,136,11)"/><text x="96.5430%" y="623.50"></text></g><g><title>std::rt::lang_start::{{closure}}::he79ec0169c9d5a53 (56 samples, 0.15%)</title><rect x="96.2930%" y="597" width="0.1540%" height="15" fill="rgb(219,138,53)"/><text x="96.5430%" y="607.50"></text></g><g><title>alloc_free::main::hc80b97a251692aa3 (56 samples, 0.15%)</title><rect x="96.2930%" y="581" width="0.1540%" height="15" fill="rgb(211,51,23)"/><text x="96.5430%" y="591.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (56 samples, 0.15%)</title><rect x="96.2930%" y="565" width="0.1540%" height="15" fill="rgb(247,221,28)"/><text x="96.5430%" y="575.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (56 samples, 0.15%)</title><rect x="96.2930%" y="549" width="0.1540%" height="15" fill="rgb(251,222,45)"/><text x="96.5430%" y="559.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (56 samples, 0.15%)</title><rect x="96.2930%" y="533" width="0.1540%" height="15" fill="rgb(217,162,53)"/><text x="96.5430%" y="543.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (56 samples, 0.15%)</title><rect x="96.2930%" y="517" width="0.1540%" height="15" fill="rgb(229,93,14)"/><text x="96.5430%" y="527.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (56 samples, 0.15%)</title><rect x="96.2930%" y="501" width="0.1540%" height="15" fill="rgb(209,67,49)"/><text x="96.5430%" y="511.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (56 samples, 0.15%)</title><rect x="96.2930%" y="485" width="0.1540%" height="15" fill="rgb(213,87,29)"/><text x="96.5430%" y="495.50"></text></g><g><title>Unknown (40 samples, 0.11%)</title><rect x="96.5790%" y="693" width="0.1100%" height="15" fill="rgb(205,151,52)"/><text x="96.8290%" y="703.50"></text></g><g><title>_start (40 samples, 0.11%)</title><rect x="96.5790%" y="677" width="0.1100%" height="15" fill="rgb(253,215,39)"/><text x="96.8290%" y="687.50"></text></g><g><title>__libc_start_main (40 samples, 0.11%)</title><rect x="96.5790%" y="661" width="0.1100%" height="15" fill="rgb(221,220,41)"/><text x="96.8290%" y="671.50"></text></g><g><title>main (40 samples, 0.11%)</title><rect x="96.5790%" y="645" width="0.1100%" height="15" fill="rgb(218,133,21)"/><text x="96.8290%" y="655.50"></text></g><g><title>std::rt::lang_start_internal::hd7efcfd33686f472/std::panic::catch_unwind::h05e542185e35aabf/std::panicking::try::h28c2e2ec1c3871ce (40 samples, 0.11%)</title><rect x="96.5790%" y="629" width="0.1100%" height="15" fill="rgb(221,193,43)"/><text x="96.8290%" y="639.50"></text></g><g><title>__rust_maybe_catch_panic (40 samples, 0.11%)</title><rect x="96.5790%" y="613" width="0.1100%" height="15" fill="rgb(240,128,52)"/><text x="96.8290%" y="623.50"></text></g><g><title>std::panicking::try::do_call::h3210e2ce6a68897b/std::rt::lang_start_internal::{{closure}}::h812f70926ebbddd0 (40 samples, 0.11%)</title><rect x="96.5790%" y="597" width="0.1100%" height="15" fill="rgb(253,114,12)"/><text x="96.8290%" y="607.50"></text></g><g><title>std::rt::lang_start::{{closure}}::he79ec0169c9d5a53 (40 samples, 0.11%)</title><rect x="96.5790%" y="581" width="0.1100%" height="15" fill="rgb(215,223,47)"/><text x="96.8290%" y="591.50"></text></g><g><title>alloc_free::main::hc80b97a251692aa3 (40 samples, 0.11%)</title><rect x="96.5790%" y="565" width="0.1100%" height="15" fill="rgb(248,225,23)"/><text x="96.8290%" y="575.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (40 samples, 0.11%)</title><rect x="96.5790%" y="549" width="0.1100%" height="15" fill="rgb(250,108,0)"/><text x="96.8290%" y="559.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (40 samples, 0.11%)</title><rect x="96.5790%" y="533" width="0.1100%" height="15" fill="rgb(228,208,7)"/><text x="96.8290%" y="543.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (40 samples, 0.11%)</title><rect x="96.5790%" y="517" width="0.1100%" height="15" fill="rgb(244,45,10)"/><text x="96.8290%" y="527.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (40 samples, 0.11%)</title><rect x="96.5790%" y="501" width="0.1100%" height="15" fill="rgb(207,125,25)"/><text x="96.8290%" y="511.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (40 samples, 0.11%)</title><rect x="96.5790%" y="485" width="0.1100%" height="15" fill="rgb(210,195,18)"/><text x="96.8290%" y="495.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (40 samples, 0.11%)</title><rect x="96.5790%" y="469" width="0.1100%" height="15" fill="rgb(249,80,12)"/><text x="96.8290%" y="479.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (40 samples, 0.11%)</title><rect x="96.5790%" y="453" width="0.1100%" height="15" fill="rgb(221,65,9)"/><text x="96.8290%" y="463.50"></text></g><g><title>Unknown (48 samples, 0.13%)</title><rect x="97.0410%" y="661" width="0.1320%" height="15" fill="rgb(235,49,36)"/><text x="97.2910%" y="671.50"></text></g><g><title>_start (48 samples, 0.13%)</title><rect x="97.0410%" y="645" width="0.1320%" height="15" fill="rgb(225,32,20)"/><text x="97.2910%" y="655.50"></text></g><g><title>__libc_start_main (48 samples, 0.13%)</title><rect x="97.0410%" y="629" width="0.1320%" height="15" fill="rgb(215,141,46)"/><text x="97.2910%" y="639.50"></text></g><g><title>main (48 samples, 0.13%)</title><rect x="97.0410%" y="613" width="0.1320%" height="15" fill="rgb(250,160,47)"/><text x="97.2910%" y="623.50"></text></g><g><title>std::rt::lang_start_internal::hd7efcfd33686f472/std::panic::catch_unwind::h05e542185e35aabf/std::panicking::try::h28c2e2ec1c3871ce (48 samples, 0.13%)</title><rect x="97.0410%" y="597" width="0.1320%" height="15" fill="rgb(216,222,40)"/><text x="97.2910%" y="607.50"></text></g><g><title>__rust_maybe_catch_panic (48 samples, 0.13%)</title><rect x="97.0410%" y="581" width="0.1320%" height="15" fill="rgb(234,217,39)"/><text x="97.2910%" y="591.50"></text></g><g><title>std::panicking::try::do_call::h3210e2ce6a68897b/std::rt::lang_start_internal::{{closure}}::h812f70926ebbddd0 (48 samples, 0.13%)</title><rect x="97.0410%" y="565" width="0.1320%" height="15" fill="rgb(207,178,40)"/><text x="97.2910%" y="575.50"></text></g><g><title>std::rt::lang_start::{{closure}}::he79ec0169c9d5a53 (48 samples, 0.13%)</title><rect x="97.0410%" y="549" width="0.1320%" height="15" fill="rgb(221,136,13)"/><text x="97.2910%" y="559.50"></text></g><g><title>alloc_free::main::hc80b97a251692aa3 (48 samples, 0.13%)</title><rect x="97.0410%" y="533" width="0.1320%" height="15" fill="rgb(249,199,10)"/><text x="97.2910%" y="543.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (48 samples, 0.13%)</title><rect x="97.0410%" y="517" width="0.1320%" height="15" fill="rgb(249,222,13)"/><text x="97.2910%" y="527.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (48 samples, 0.13%)</title><rect x="97.0410%" y="501" width="0.1320%" height="15" fill="rgb(244,185,38)"/><text x="97.2910%" y="511.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (48 samples, 0.13%)</title><rect x="97.0410%" y="485" width="0.1320%" height="15" fill="rgb(236,202,9)"/><text x="97.2910%" y="495.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (48 samples, 0.13%)</title><rect x="97.0410%" y="469" width="0.1320%" height="15" fill="rgb(250,229,37)"/><text x="97.2910%" y="479.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (48 samples, 0.13%)</title><rect x="97.0410%" y="453" width="0.1320%" height="15" fill="rgb(206,174,23)"/><text x="97.2910%" y="463.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (48 samples, 0.13%)</title><rect x="97.0410%" y="437" width="0.1320%" height="15" fill="rgb(211,33,43)"/><text x="97.2910%" y="447.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (48 samples, 0.13%)</title><rect x="97.0410%" y="421" width="0.1320%" height="15" fill="rgb(245,58,50)"/><text x="97.2910%" y="431.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (48 samples, 0.13%)</title><rect x="97.0410%" y="405" width="0.1320%" height="15" fill="rgb(244,68,36)"/><text x="97.2910%" y="415.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (48 samples, 0.13%)</title><rect x="97.0410%" y="389" width="0.1320%" height="15" fill="rgb(232,229,15)"/><text x="97.2910%" y="399.50"></text></g><g><title>Unknown (56 samples, 0.15%)</title><rect x="97.3050%" y="645" width="0.1540%" height="15" fill="rgb(254,30,23)"/><text x="97.5550%" y="655.50"></text></g><g><title>_start (56 samples, 0.15%)</title><rect x="97.3050%" y="629" width="0.1540%" height="15" fill="rgb(235,160,14)"/><text x="97.5550%" y="639.50"></text></g><g><title>__libc_start_main (56 samples, 0.15%)</title><rect x="97.3050%" y="613" width="0.1540%" height="15" fill="rgb(212,155,44)"/><text x="97.5550%" y="623.50"></text></g><g><title>main (56 samples, 0.15%)</title><rect x="97.3050%" y="597" width="0.1540%" height="15" fill="rgb(226,2,50)"/><text x="97.5550%" y="607.50"></text></g><g><title>std::rt::lang_start_internal::hd7efcfd33686f472/std::panic::catch_unwind::h05e542185e35aabf/std::panicking::try::h28c2e2ec1c3871ce (56 samples, 0.15%)</title><rect x="97.3050%" y="581" width="0.1540%" height="15" fill="rgb(234,177,6)"/><text x="97.5550%" y="591.50"></text></g><g><title>__rust_maybe_catch_panic (56 samples, 0.15%)</title><rect x="97.3050%" y="565" width="0.1540%" height="15" fill="rgb(217,24,9)"/><text x="97.5550%" y="575.50"></text></g><g><title>std::panicking::try::do_call::h3210e2ce6a68897b/std::rt::lang_start_internal::{{closure}}::h812f70926ebbddd0 (56 samples, 0.15%)</title><rect x="97.3050%" y="549" width="0.1540%" height="15" fill="rgb(220,13,46)"/><text x="97.5550%" y="559.50"></text></g><g><title>std::rt::lang_start::{{closure}}::he79ec0169c9d5a53 (56 samples, 0.15%)</title><rect x="97.3050%" y="533" width="0.1540%" height="15" fill="rgb(239,221,27)"/><text x="97.5550%" y="543.50"></text></g><g><title>alloc_free::main::hc80b97a251692aa3 (56 samples, 0.15%)</title><rect x="97.3050%" y="517" width="0.1540%" height="15" fill="rgb(222,198,25)"/><text x="97.5550%" y="527.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (56 samples, 0.15%)</title><rect x="97.3050%" y="501" width="0.1540%" height="15" fill="rgb(211,99,13)"/><text x="97.5550%" y="511.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (56 samples, 0.15%)</title><rect x="97.3050%" y="485" width="0.1540%" height="15" fill="rgb(232,111,31)"/><text x="97.5550%" y="495.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (56 samples, 0.15%)</title><rect x="97.3050%" y="469" width="0.1540%" height="15" fill="rgb(245,82,37)"/><text x="97.5550%" y="479.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (56 samples, 0.15%)</title><rect x="97.3050%" y="453" width="0.1540%" height="15" fill="rgb(227,149,46)"/><text x="97.5550%" y="463.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (56 samples, 0.15%)</title><rect x="97.3050%" y="437" width="0.1540%" height="15" fill="rgb(218,36,50)"/><text x="97.5550%" y="447.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (56 samples, 0.15%)</title><rect x="97.3050%" y="421" width="0.1540%" height="15" fill="rgb(226,80,48)"/><text x="97.5550%" y="431.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (56 samples, 0.15%)</title><rect x="97.3050%" y="405" width="0.1540%" height="15" fill="rgb(238,224,15)"/><text x="97.5550%" y="415.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (56 samples, 0.15%)</title><rect x="97.3050%" y="389" width="0.1540%" height="15" fill="rgb(241,136,10)"/><text x="97.5550%" y="399.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (56 samples, 0.15%)</title><rect x="97.3050%" y="373" width="0.1540%" height="15" fill="rgb(208,32,45)"/><text x="97.5550%" y="383.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (56 samples, 0.15%)</title><rect x="97.3050%" y="357" width="0.1540%" height="15" fill="rgb(207,135,9)"/><text x="97.5550%" y="367.50"></text></g><g><title>Unknown (48 samples, 0.13%)</title><rect x="97.5800%" y="629" width="0.1320%" height="15" fill="rgb(206,86,44)"/><text x="97.8300%" y="639.50"></text></g><g><title>_start (48 samples, 0.13%)</title><rect x="97.5800%" y="613" width="0.1320%" height="15" fill="rgb(245,177,15)"/><text x="97.8300%" y="623.50"></text></g><g><title>__libc_start_main (48 samples, 0.13%)</title><rect x="97.5800%" y="597" width="0.1320%" height="15" fill="rgb(206,64,50)"/><text x="97.8300%" y="607.50"></text></g><g><title>main (48 samples, 0.13%)</title><rect x="97.5800%" y="581" width="0.1320%" height="15" fill="rgb(234,36,40)"/><text x="97.8300%" y="591.50"></text></g><g><title>std::rt::lang_start_internal::hd7efcfd33686f472/std::panic::catch_unwind::h05e542185e35aabf/std::panicking::try::h28c2e2ec1c3871ce (48 samples, 0.13%)</title><rect x="97.5800%" y="565" width="0.1320%" height="15" fill="rgb(213,64,8)"/><text x="97.8300%" y="575.50"></text></g><g><title>__rust_maybe_catch_panic (48 samples, 0.13%)</title><rect x="97.5800%" y="549" width="0.1320%" height="15" fill="rgb(210,75,36)"/><text x="97.8300%" y="559.50"></text></g><g><title>std::panicking::try::do_call::h3210e2ce6a68897b/std::rt::lang_start_internal::{{closure}}::h812f70926ebbddd0 (48 samples, 0.13%)</title><rect x="97.5800%" y="533" width="0.1320%" height="15" fill="rgb(229,88,21)"/><text x="97.8300%" y="543.50"></text></g><g><title>std::rt::lang_start::{{closure}}::he79ec0169c9d5a53 (48 samples, 0.13%)</title><rect x="97.5800%" y="517" width="0.1320%" height="15" fill="rgb(252,204,47)"/><text x="97.8300%" y="527.50"></text></g><g><title>alloc_free::main::hc80b97a251692aa3 (48 samples, 0.13%)</title><rect x="97.5800%" y="501" width="0.1320%" height="15" fill="rgb(208,77,27)"/><text x="97.8300%" y="511.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (48 samples, 0.13%)</title><rect x="97.5800%" y="485" width="0.1320%" height="15" fill="rgb(221,76,26)"/><text x="97.8300%" y="495.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (48 samples, 0.13%)</title><rect x="97.5800%" y="469" width="0.1320%" height="15" fill="rgb(225,139,18)"/><text x="97.8300%" y="479.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (48 samples, 0.13%)</title><rect x="97.5800%" y="453" width="0.1320%" height="15" fill="rgb(230,137,11)"/><text x="97.8300%" y="463.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (48 samples, 0.13%)</title><rect x="97.5800%" y="437" width="0.1320%" height="15" fill="rgb(212,28,1)"/><text x="97.8300%" y="447.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (48 samples, 0.13%)</title><rect x="97.5800%" y="421" width="0.1320%" height="15" fill="rgb(248,164,17)"/><text x="97.8300%" y="431.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (48 samples, 0.13%)</title><rect x="97.5800%" y="405" width="0.1320%" height="15" fill="rgb(222,171,42)"/><text x="97.8300%" y="415.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (48 samples, 0.13%)</title><rect x="97.5800%" y="389" width="0.1320%" height="15" fill="rgb(243,84,45)"/><text x="97.8300%" y="399.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (48 samples, 0.13%)</title><rect x="97.5800%" y="373" width="0.1320%" height="15" fill="rgb(252,49,23)"/><text x="97.8300%" y="383.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (48 samples, 0.13%)</title><rect x="97.5800%" y="357" width="0.1320%" height="15" fill="rgb(215,19,7)"/><text x="97.8300%" y="367.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (48 samples, 0.13%)</title><rect x="97.5800%" y="341" width="0.1320%" height="15" fill="rgb(238,81,41)"/><text x="97.8300%" y="351.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (48 samples, 0.13%)</title><rect x="97.5800%" y="325" width="0.1320%" height="15" fill="rgb(210,199,37)"/><text x="97.8300%" y="335.50"></text></g><g><title>Unknown (40 samples, 0.11%)</title><rect x="97.8220%" y="613" width="0.1100%" height="15" fill="rgb(244,192,49)"/><text x="98.0720%" y="623.50"></text></g><g><title>_start (40 samples, 0.11%)</title><rect x="97.8220%" y="597" width="0.1100%" height="15" fill="rgb(226,211,11)"/><text x="98.0720%" y="607.50"></text></g><g><title>__libc_start_main (40 samples, 0.11%)</title><rect x="97.8220%" y="581" width="0.1100%" height="15" fill="rgb(236,162,54)"/><text x="98.0720%" y="591.50"></text></g><g><title>main (40 samples, 0.11%)</title><rect x="97.8220%" y="565" width="0.1100%" height="15" fill="rgb(220,229,9)"/><text x="98.0720%" y="575.50"></text></g><g><title>std::rt::lang_start_internal::hd7efcfd33686f472/std::panic::catch_unwind::h05e542185e35aabf/std::panicking::try::h28c2e2ec1c3871ce (40 samples, 0.11%)</title><rect x="97.8220%" y="549" width="0.1100%" height="15" fill="rgb(250,87,22)"/><text x="98.0720%" y="559.50"></text></g><g><title>__rust_maybe_catch_panic (40 samples, 0.11%)</title><rect x="97.8220%" y="533" width="0.1100%" height="15" fill="rgb(239,43,17)"/><text x="98.0720%" y="543.50"></text></g><g><title>std::panicking::try::do_call::h3210e2ce6a68897b/std::rt::lang_start_internal::{{closure}}::h812f70926ebbddd0 (40 samples, 0.11%)</title><rect x="97.8220%" y="517" width="0.1100%" height="15" fill="rgb(231,177,25)"/><text x="98.0720%" y="527.50"></text></g><g><title>std::rt::lang_start::{{closure}}::he79ec0169c9d5a53 (40 samples, 0.11%)</title><rect x="97.8220%" y="501" width="0.1100%" height="15" fill="rgb(219,179,1)"/><text x="98.0720%" y="511.50"></text></g><g><title>alloc_free::main::hc80b97a251692aa3 (40 samples, 0.11%)</title><rect x="97.8220%" y="485" width="0.1100%" height="15" fill="rgb(238,219,53)"/><text x="98.0720%" y="495.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (40 samples, 0.11%)</title><rect x="97.8220%" y="469" width="0.1100%" height="15" fill="rgb(232,167,36)"/><text x="98.0720%" y="479.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (40 samples, 0.11%)</title><rect x="97.8220%" y="453" width="0.1100%" height="15" fill="rgb(244,19,51)"/><text x="98.0720%" y="463.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (40 samples, 0.11%)</title><rect x="97.8220%" y="437" width="0.1100%" height="15" fill="rgb(224,6,22)"/><text x="98.0720%" y="447.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (40 samples, 0.11%)</title><rect x="97.8220%" y="421" width="0.1100%" height="15" fill="rgb(224,145,5)"/><text x="98.0720%" y="431.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (40 samples, 0.11%)</title><rect x="97.8220%" y="405" width="0.1100%" height="15" fill="rgb(234,130,49)"/><text x="98.0720%" y="415.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (40 samples, 0.11%)</title><rect x="97.8220%" y="389" width="0.1100%" height="15" fill="rgb(254,6,2)"/><text x="98.0720%" y="399.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (40 samples, 0.11%)</title><rect x="97.8220%" y="373" width="0.1100%" height="15" fill="rgb(208,96,46)"/><text x="98.0720%" y="383.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (40 samples, 0.11%)</title><rect x="97.8220%" y="357" width="0.1100%" height="15" fill="rgb(239,3,39)"/><text x="98.0720%" y="367.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (40 samples, 0.11%)</title><rect x="97.8220%" y="341" width="0.1100%" height="15" fill="rgb(233,210,1)"/><text x="98.0720%" y="351.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (40 samples, 0.11%)</title><rect x="97.8220%" y="325" width="0.1100%" height="15" fill="rgb(244,137,37)"/><text x="98.0720%" y="335.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (40 samples, 0.11%)</title><rect x="97.8220%" y="309" width="0.1100%" height="15" fill="rgb(240,136,2)"/><text x="98.0720%" y="319.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (40 samples, 0.11%)</title><rect x="97.8220%" y="293" width="0.1100%" height="15" fill="rgb(239,18,37)"/><text x="98.0720%" y="303.50"></text></g><g><title>Unknown (72 samples, 0.20%)</title><rect x="98.5370%" y="565" width="0.1980%" height="15" fill="rgb(218,185,22)"/><text x="98.7870%" y="575.50"></text></g><g><title>_start (72 samples, 0.20%)</title><rect x="98.5370%" y="549" width="0.1980%" height="15" fill="rgb(225,218,4)"/><text x="98.7870%" y="559.50"></text></g><g><title>__libc_start_main (72 samples, 0.20%)</title><rect x="98.5370%" y="533" width="0.1980%" height="15" fill="rgb(230,182,32)"/><text x="98.7870%" y="543.50"></text></g><g><title>main (72 samples, 0.20%)</title><rect x="98.5370%" y="517" width="0.1980%" height="15" fill="rgb(242,56,43)"/><text x="98.7870%" y="527.50"></text></g><g><title>std::rt::lang_start_internal::hd7efcfd33686f472/std::panic::catch_unwind::h05e542185e35aabf/std::panicking::try::h28c2e2ec1c3871ce (72 samples, 0.20%)</title><rect x="98.5370%" y="501" width="0.1980%" height="15" fill="rgb(233,99,24)"/><text x="98.7870%" y="511.50"></text></g><g><title>__rust_maybe_catch_panic (72 samples, 0.20%)</title><rect x="98.5370%" y="485" width="0.1980%" height="15" fill="rgb(234,209,42)"/><text x="98.7870%" y="495.50"></text></g><g><title>std::panicking::try::do_call::h3210e2ce6a68897b/std::rt::lang_start_internal::{{closure}}::h812f70926ebbddd0 (72 samples, 0.20%)</title><rect x="98.5370%" y="469" width="0.1980%" height="15" fill="rgb(227,7,12)"/><text x="98.7870%" y="479.50"></text></g><g><title>std::rt::lang_start::{{closure}}::he79ec0169c9d5a53 (72 samples, 0.20%)</title><rect x="98.5370%" y="453" width="0.1980%" height="15" fill="rgb(245,203,43)"/><text x="98.7870%" y="463.50"></text></g><g><title>alloc_free::main::hc80b97a251692aa3 (72 samples, 0.20%)</title><rect x="98.5370%" y="437" width="0.1980%" height="15" fill="rgb(238,205,33)"/><text x="98.7870%" y="447.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (72 samples, 0.20%)</title><rect x="98.5370%" y="421" width="0.1980%" height="15" fill="rgb(231,56,7)"/><text x="98.7870%" y="431.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (72 samples, 0.20%)</title><rect x="98.5370%" y="405" width="0.1980%" height="15" fill="rgb(244,186,29)"/><text x="98.7870%" y="415.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (72 samples, 0.20%)</title><rect x="98.5370%" y="389" width="0.1980%" height="15" fill="rgb(234,111,31)"/><text x="98.7870%" y="399.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (72 samples, 0.20%)</title><rect x="98.5370%" y="373" width="0.1980%" height="15" fill="rgb(241,149,10)"/><text x="98.7870%" y="383.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (72 samples, 0.20%)</title><rect x="98.5370%" y="357" width="0.1980%" height="15" fill="rgb(249,206,44)"/><text x="98.7870%" y="367.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (72 samples, 0.20%)</title><rect x="98.5370%" y="341" width="0.1980%" height="15" fill="rgb(251,153,30)"/><text x="98.7870%" y="351.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (72 samples, 0.20%)</title><rect x="98.5370%" y="325" width="0.1980%" height="15" fill="rgb(239,152,38)"/><text x="98.7870%" y="335.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (72 samples, 0.20%)</title><rect x="98.5370%" y="309" width="0.1980%" height="15" fill="rgb(249,139,47)"/><text x="98.7870%" y="319.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (72 samples, 0.20%)</title><rect x="98.5370%" y="293" width="0.1980%" height="15" fill="rgb(244,64,35)"/><text x="98.7870%" y="303.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (72 samples, 0.20%)</title><rect x="98.5370%" y="277" width="0.1980%" height="15" fill="rgb(216,46,15)"/><text x="98.7870%" y="287.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (72 samples, 0.20%)</title><rect x="98.5370%" y="261" width="0.1980%" height="15" fill="rgb(250,74,19)"/><text x="98.7870%" y="271.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (72 samples, 0.20%)</title><rect x="98.5370%" y="245" width="0.1980%" height="15" fill="rgb(249,42,33)"/><text x="98.7870%" y="255.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (72 samples, 0.20%)</title><rect x="98.5370%" y="229" width="0.1980%" height="15" fill="rgb(242,149,17)"/><text x="98.7870%" y="239.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (72 samples, 0.20%)</title><rect x="98.5370%" y="213" width="0.1980%" height="15" fill="rgb(244,29,21)"/><text x="98.7870%" y="223.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (72 samples, 0.20%)</title><rect x="98.5370%" y="197" width="0.1980%" height="15" fill="rgb(220,130,37)"/><text x="98.7870%" y="207.50"></text></g><g><title>Unknown (40 samples, 0.11%)</title><rect x="99.6260%" y="485" width="0.1100%" height="15" fill="rgb(211,67,2)"/><text x="99.8760%" y="495.50"></text></g><g><title>_start (40 samples, 0.11%)</title><rect x="99.6260%" y="469" width="0.1100%" height="15" fill="rgb(235,68,52)"/><text x="99.8760%" y="479.50"></text></g><g><title>__libc_start_main (40 samples, 0.11%)</title><rect x="99.6260%" y="453" width="0.1100%" height="15" fill="rgb(246,142,3)"/><text x="99.8760%" y="463.50"></text></g><g><title>main (40 samples, 0.11%)</title><rect x="99.6260%" y="437" width="0.1100%" height="15" fill="rgb(241,25,7)"/><text x="99.8760%" y="447.50"></text></g><g><title>std::rt::lang_start_internal::hd7efcfd33686f472/std::panic::catch_unwind::h05e542185e35aabf/std::panicking::try::h28c2e2ec1c3871ce (40 samples, 0.11%)</title><rect x="99.6260%" y="421" width="0.1100%" height="15" fill="rgb(242,119,39)"/><text x="99.8760%" y="431.50"></text></g><g><title>__rust_maybe_catch_panic (40 samples, 0.11%)</title><rect x="99.6260%" y="405" width="0.1100%" height="15" fill="rgb(241,98,45)"/><text x="99.8760%" y="415.50"></text></g><g><title>std::panicking::try::do_call::h3210e2ce6a68897b/std::rt::lang_start_internal::{{closure}}::h812f70926ebbddd0 (40 samples, 0.11%)</title><rect x="99.6260%" y="389" width="0.1100%" height="15" fill="rgb(254,28,30)"/><text x="99.8760%" y="399.50"></text></g><g><title>std::rt::lang_start::{{closure}}::he79ec0169c9d5a53 (40 samples, 0.11%)</title><rect x="99.6260%" y="373" width="0.1100%" height="15" fill="rgb(241,142,54)"/><text x="99.8760%" y="383.50"></text></g><g><title>alloc_free::main::hc80b97a251692aa3 (40 samples, 0.11%)</title><rect x="99.6260%" y="357" width="0.1100%" height="15" fill="rgb(222,85,15)"/><text x="99.8760%" y="367.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (40 samples, 0.11%)</title><rect x="99.6260%" y="341" width="0.1100%" height="15" fill="rgb(210,85,47)"/><text x="99.8760%" y="351.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (40 samples, 0.11%)</title><rect x="99.6260%" y="325" width="0.1100%" height="15" fill="rgb(224,206,25)"/><text x="99.8760%" y="335.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (40 samples, 0.11%)</title><rect x="99.6260%" y="309" width="0.1100%" height="15" fill="rgb(243,201,19)"/><text x="99.8760%" y="319.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (40 samples, 0.11%)</title><rect x="99.6260%" y="293" width="0.1100%" height="15" fill="rgb(236,59,4)"/><text x="99.8760%" y="303.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (40 samples, 0.11%)</title><rect x="99.6260%" y="277" width="0.1100%" height="15" fill="rgb(254,179,45)"/><text x="99.8760%" y="287.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (40 samples, 0.11%)</title><rect x="99.6260%" y="261" width="0.1100%" height="15" fill="rgb(226,14,10)"/><text x="99.8760%" y="271.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (40 samples, 0.11%)</title><rect x="99.6260%" y="245" width="0.1100%" height="15" fill="rgb(244,27,41)"/><text x="99.8760%" y="255.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (40 samples, 0.11%)</title><rect x="99.6260%" y="229" width="0.1100%" height="15" fill="rgb(235,35,32)"/><text x="99.8760%" y="239.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (40 samples, 0.11%)</title><rect x="99.6260%" y="213" width="0.1100%" height="15" fill="rgb(218,68,31)"/><text x="99.8760%" y="223.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (40 samples, 0.11%)</title><rect x="99.6260%" y="197" width="0.1100%" height="15" fill="rgb(207,120,37)"/><text x="99.8760%" y="207.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (40 samples, 0.11%)</title><rect x="99.6260%" y="181" width="0.1100%" height="15" fill="rgb(227,98,0)"/><text x="99.8760%" y="191.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (40 samples, 0.11%)</title><rect x="99.6260%" y="165" width="0.1100%" height="15" fill="rgb(207,7,3)"/><text x="99.8760%" y="175.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (40 samples, 0.11%)</title><rect x="99.6260%" y="149" width="0.1100%" height="15" fill="rgb(206,98,19)"/><text x="99.8760%" y="159.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (40 samples, 0.11%)</title><rect x="99.6260%" y="133" width="0.1100%" height="15" fill="rgb(217,5,26)"/><text x="99.8760%" y="143.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (40 samples, 0.11%)</title><rect x="99.6260%" y="117" width="0.1100%" height="15" fill="rgb(235,190,38)"/><text x="99.8760%" y="127.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (40 samples, 0.11%)</title><rect x="99.6260%" y="101" width="0.1100%" height="15" fill="rgb(247,86,24)"/><text x="99.8760%" y="111.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (40 samples, 0.11%)</title><rect x="99.6260%" y="85" width="0.1100%" height="15" fill="rgb(205,101,16)"/><text x="99.8760%" y="95.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (40 samples, 0.11%)</title><rect x="99.6260%" y="69" width="0.1100%" height="15" fill="rgb(246,168,33)"/><text x="99.8760%" y="79.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (40 samples, 0.11%)</title><rect x="99.6260%" y="53" width="0.1100%" height="15" fill="rgb(231,114,1)"/><text x="99.8760%" y="63.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (40 samples, 0.11%)</title><rect x="99.6260%" y="37" width="0.1100%" height="15" fill="rgb(207,184,53)"/><text x="99.8760%" y="47.50"></text></g><g><title>all (36,364 samples, 100%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(224,95,51)"/><text x="0.2500%" y="991.50"></text></g><g><title>Unknown (36,364 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(212,188,45)"/><text x="0.2500%" y="975.50">Unknown</text></g><g><title>_start (36,364 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(223,154,38)"/><text x="0.2500%" y="959.50">_start</text></g><g><title>__libc_start_main (36,364 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(251,22,52)"/><text x="0.2500%" y="943.50">__libc_start_main</text></g><g><title>main (36,364 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(229,209,22)"/><text x="0.2500%" y="927.50">main</text></g><g><title>std::rt::lang_start_internal::hd7efcfd33686f472/std::panic::catch_unwind::h05e542185e35aabf/std::panicking::try::h28c2e2ec1c3871ce (36,364 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(234,138,34)"/><text x="0.2500%" y="911.50">std::rt::lang_start_internal::hd7efcfd33686f472/std::panic::catch_unwind::h05e542185e35aabf/std::panicking::try::h28c2e2ec1c3871ce</text></g><g><title>__rust_maybe_catch_panic (36,364 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(212,95,11)"/><text x="0.2500%" y="895.50">__rust_maybe_catch_panic</text></g><g><title>std::panicking::try::do_call::h3210e2ce6a68897b/std::rt::lang_start_internal::{{closure}}::h812f70926ebbddd0 (36,364 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(240,179,47)"/><text x="0.2500%" y="879.50">std::panicking::try::do_call::h3210e2ce6a68897b/std::rt::lang_start_internal::{{closure}}::h812f70926ebbddd0</text></g><g><title>std::rt::lang_start::{{closure}}::he79ec0169c9d5a53 (36,364 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(240,163,11)"/><text x="0.2500%" y="863.50">std::rt::lang_start::{{closure}}::he79ec0169c9d5a53</text></g><g><title>alloc_free::main::hc80b97a251692aa3 (36,364 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(236,37,12)"/><text x="0.2500%" y="847.50">alloc_free::main::hc80b97a251692aa3</text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (34,312 samples, 94.36%)</title><rect x="5.6429%" y="821" width="94.3571%" height="15" fill="rgb(232,164,16)"/><text x="5.8929%" y="831.50">alloc_free::quick_sort::h63d3b38ac2082f8f</text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (20,248 samples, 55.68%)</title><rect x="44.3186%" y="805" width="55.6814%" height="15" fill="rgb(244,205,15)"/><text x="44.5686%" y="815.50">alloc_free::quick_sort::h63d3b38ac2082f8f</text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (11,320 samples, 31.13%)</title><rect x="68.8703%" y="789" width="31.1297%" height="15" fill="rgb(223,117,47)"/><text x="69.1203%" y="799.50">alloc_free::quick_sort::h63d3b38ac2082f8f</text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (3,992 samples, 10.98%)</title><rect x="89.0221%" y="773" width="10.9779%" height="15" fill="rgb(244,107,35)"/><text x="89.2721%" y="783.50">alloc_free::quic..</text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (1,700 samples, 4.67%)</title><rect x="95.3250%" y="757" width="4.6750%" height="15" fill="rgb(205,140,8)"/><text x="95.5750%" y="767.50">alloc..</text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (1,496 samples, 4.11%)</title><rect x="95.8860%" y="741" width="4.1140%" height="15" fill="rgb(228,84,46)"/><text x="96.1360%" y="751.50">allo..</text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (1,392 samples, 3.83%)</title><rect x="96.1720%" y="725" width="3.8280%" height="15" fill="rgb(254,188,9)"/><text x="96.4220%" y="735.50">allo..</text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (1,292 samples, 3.55%)</title><rect x="96.4470%" y="709" width="3.5530%" height="15" fill="rgb(206,112,54)"/><text x="96.6970%" y="719.50">allo..</text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (1,204 samples, 3.31%)</title><rect x="96.6890%" y="693" width="3.3110%" height="15" fill="rgb(216,84,49)"/><text x="96.9390%" y="703.50">all..</text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (1,132 samples, 3.11%)</title><rect x="96.8870%" y="677" width="3.1130%" height="15" fill="rgb(214,194,35)"/><text x="97.1370%" y="687.50">all..</text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (1,028 samples, 2.83%)</title><rect x="97.1730%" y="661" width="2.8270%" height="15" fill="rgb(249,28,3)"/><text x="97.4230%" y="671.50">al..</text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (924 samples, 2.54%)</title><rect x="97.4590%" y="645" width="2.5410%" height="15" fill="rgb(222,56,52)"/><text x="97.7090%" y="655.50">al..</text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (832 samples, 2.29%)</title><rect x="97.7120%" y="629" width="2.2880%" height="15" fill="rgb(245,217,50)"/><text x="97.9620%" y="639.50">a..</text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (752 samples, 2.07%)</title><rect x="97.9320%" y="613" width="2.0680%" height="15" fill="rgb(213,201,24)"/><text x="98.1820%" y="623.50">a..</text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (672 samples, 1.85%)</title><rect x="98.1520%" y="597" width="1.8480%" height="15" fill="rgb(248,116,28)"/><text x="98.4020%" y="607.50">a..</text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (580 samples, 1.59%)</title><rect x="98.4050%" y="581" width="1.5950%" height="15" fill="rgb(219,72,43)"/><text x="98.6550%" y="591.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (460 samples, 1.26%)</title><rect x="98.7350%" y="565" width="1.2650%" height="15" fill="rgb(209,138,14)"/><text x="98.9850%" y="575.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (388 samples, 1.07%)</title><rect x="98.9330%" y="549" width="1.0670%" height="15" fill="rgb(222,18,33)"/><text x="99.1830%" y="559.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (320 samples, 0.88%)</title><rect x="99.1200%" y="533" width="0.8800%" height="15" fill="rgb(213,199,7)"/><text x="99.3700%" y="543.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (240 samples, 0.66%)</title><rect x="99.3400%" y="517" width="0.6600%" height="15" fill="rgb(250,110,10)"/><text x="99.5900%" y="527.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (168 samples, 0.46%)</title><rect x="99.5380%" y="501" width="0.4620%" height="15" fill="rgb(248,123,6)"/><text x="99.7880%" y="511.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (96 samples, 0.26%)</title><rect x="99.7360%" y="485" width="0.2640%" height="15" fill="rgb(206,91,31)"/><text x="99.9860%" y="495.50"></text></g><g><title>alloc_free::quick_sort::h63d3b38ac2082f8f (52 samples, 0.14%)</title><rect x="99.8570%" y="469" width="0.1430%" height="15" fill="rgb(211,154,13)"/><text x="100.1070%" y="479.50"></text></g></svg></svg>